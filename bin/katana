#!/usr/bin/env node

/**
 * Module Dependencies
 */
var ansi = require('ansi')
var fs = require('fs')
var program = require('commander')
var path = require('path')

var cursor = ansi(process.stderr)

var katana = require('../lib')

/**
 * Error Codes
 */
var SUCCESS = 0         // Compilation successful
var IO_ERROR = 1        // Unable to read or write files
var COMPILATION_ERROR = 2    // Errors in one or more source files
var INTERNAL_ERROR = 3  // Internal logic error in the compiler

/**
 * Grab package.json for version info
 */
var packageJSON = JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf-8'))

program
  .usage('[options] <input file>')
  .version(packageJSON.version)
  .parse(process.argv)

var filename = program.args[0]
if (!filename.match(/^\//)) {
  filename = path.join(process.cwd(), filename)
}

if (!filename) {
  cursor.write('error: no input file\n')
  process.exit(IO_ERROR)
}

try {
  var compiler = new katana.Compiler()
  var result = compiler.compile(filename)
  compiler.writeErrors(process.stderr)
  if (compiler.failed) {
    process.exit(COMPILATION_ERROR)
  } else {
    process.exit(SUCCESS)
  }
} catch (err) {
  if (err.code == 'ENOENT') {
    cursor.write('error: could not read input file `' + err.path + '`.\n')
    process.exit(IO_ERROR)
  } else {
    cursor.red().write('INTERNAL ERROR.').reset()
    cursor.write('\n\nThe compiler encountered an internal logic error.\nThis is not a problem with your code, but within the compiler itself.\n\nPlease report this entire error log at ')
    cursor.blue().underline().write('https://github.com/coreh/katana').reset()
    cursor.write(',\nif possible along with the input that uncovered the error.\n\nSorry for the inconvenience.\n\n')
    if (err.stack) {
      cursor.write(err.stack.toString())
    } else {
      cursor.write(err.toString())
    }
    cursor.write('\n')
    process.exit(INTERNAL_ERROR)
  }
}